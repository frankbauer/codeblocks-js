{
    "Dismiss": "Dismiss",
    "CodeBlock": {
        "Initial_Content": "Initial Content"
    },
    "CodeBlockContainer": {
        "Display": "Display",
        "Lines": "Lines",
        "Lines_detail": "Number of Visible lines or <b>auto</b>.",
        "Prepopulate": "Prepopulate Answer",
        "Prepopulate_detail": "Define content that is displayed in a new answer.",
        "Behaviour": "Behaviour",
        "ScriptV": "Script Version",
        "ScriptV_detail": "API-Version for the Visualization Object.",
        "AutoReset": "Auto Reset",
        "AutoReset_detail": "Recreate Canvas-Element for each run",
        "Positioning": "Positioning",
        "Width": "Width",
        "Width_detail": "CSS Property for the canvas-width.",
        "Height": "Height",
        "Height_detail": "CSS Property for the canvas-height.",
        "Alignment": "Alignment",
        "Alignment_detail": "Horizontal Positioning of the canvas.",
        "Delete": "Delete",
        "Start": "Start",
        "Center": "Center",
        "End": "End",
        "ScriptVersion_1": "1.0 (original)",
        "ScriptVersion_2": "2.0 (since 2020)",
        "ScriptVersion_3": "3.0 (experimental)",
        "Canvas": "Visualization Canvas",
        "Text": "Plain Text",
        "Hidden": "Code (Hidden)",
        "Static": "Code (Static)",
        "Block": "Solution",
        "Blockly": "Blockly (Experimental!!!)",
        "Confirm": "Confirm",
        "DeleteQuestion": "Do you really want to delete the <span class='highlightedCard sample'>highlighted</span> Block?",
        "TypesCaption": "Block-Types",
        "Types": "The final Question is assembled using the following blocks. You my use the following block types:<ul><li><b>Plain Text</b>: Regular Text that is displayd as you Type it without any Syntax Highlighting. You may use <b>[code][/code]</b> and <b>[hl][/hl]</b> as a markup for inline source-code</li><li><b>Code (Static)</b>: read-only Source Code with Syntax highlighting. The content is used to assemble the final Program.</li><li><b>Code (Hidden)</b>: This Source Code is delivered to the client browser but invisible to the students. You may use this type for boiler-plate code you need for processing. The content is used to assemble the final Program.</li><li><b>Solution</b>: Source Code with Syntax highlighting. Should contain the best solution. The content is used to assemble the final Program.</li><li><b>Visualization Canvas</b>: A 2D-drawing area you may use to visualize the results produced by the studen. The code you specify (for Version 2.0) <b> has to return a JavaScript Object</b> providing an <ul><li><code>init(canvasElement, outputElement, scope)</code> and</li><li><code>update(txt, json, canvasElement, outputElement)</code></li></ul> method.</li></ul>"
    },
    "CodeBlocks": {
        "run_hint": "Press <code>Ctrl</code>+<code>W</code> or <code>Ctrl</code>+<code>J</code> when in a code box to run code.",
        "run": "Run",
        "stop": "Stop",
        "AddBlock": "Add new Block",
        "UserCanceled": "Stopped By User"
    },
    "CodeBlocksSettings": {
        "Language": "Language",
        "AllowExec": "Allow Code Execution",
        "CVersion": "Version",
        "RunTime": "Max. Runtime in ms.",
        "Output": "Output",
        "MaxCharacters": "Max. Output Characters",
        "ExperimentalCompiler":"Experimental Language",
        "ExperimentalCompilerDesc":"This language version is experimental. The properties and behaviour of this version might changen in the next update. You should not use this version for production.",
        "DeprecatedCompiler":"Deprecated Language",
        "DeprecatedCompilerDesc":"This language version is deprecated and will be removed in upcoming updates. Please upgrade your project to a later version.",
        "Parser": "Output Parser",
        "Themes": "Themes",
        "TGeneral": "General Theme",
        "TSolution": "Solution Theme",
        "Libraries": "Libraries",
        "DomLibs": "DOM-Libraries",
        "WorkLibs": "Worker-Libraries",
        "PAutomatic": "Automatisch",
        "PText": "Text Passthrough",
        "PJSON": "JSON",
        "PMagic": "Text+JSON (seperated by '\\n\\n&lt;JSON>\\n')",
        "PData": "Text+Data (send using 'CodeBlocks.postResult(data)')",
        "NumberErr": "Muss ein g√ºltiger Zahlenwert sein",
        "ContinousCompile": "Automatic Execution (while typing)",
        "PersistentArguments": "Persistente Arguments (between calls)",
        "MessagePassing": "Message exchange between DOM and Worker",
        "KeepAlive": "Keep Worker alive after main Finishes",
        "AllowArguments": "Supports Runtime-Arguments",
        "AllowArgumentsCaption": "Send Runtime-Arguments",
        "AllowArgumentsHint": "Using <code>addArgumentsTo(args)</code> in your <b>Visualization Canvas</b> you can add data to the passed argument-object. The object is available in the worker-code as a variable named <code>args</code>.",
        "AllowArgumentsHintJava":"Using <code>addArgumentsTo(args)</code> in your <b>Visualization Canvas</b> you can push strings to the passed arguments-array. The array is passed to <code>args</code>-parameter of the <code>main</code>-Method.",
        "UsePersistentArgumentsCaption":"Persistente Arguments",
        "UsePersistentArgumentsHint":"When set, the <args>args</args>-Value passed to <code>addArgumentsTo(args)</code> will contain the values written to <code>args</code> by the worker-code in the last run. If not set, the method will allways receiv an empty object.",
        "UsePersistentArgumentsHintJava":"When set, the <args>args</args>-Value passed to <code>addArgumentsTo(args)</code> will contain the values written to <code>args</code> by the java-code in the last run. If not set, the method will allways receiv an empty array.",
        "AllowMessagePassingCaption":"Message exchange",
        "AllowMessagePassingHint":"<b style=color:red>[EXPERIMENTAL]</b> When enabled, worker and DOM can exchange messages.<br><b>Canvas-Code:</b><ul><li><code>onMessage(cmd, data)</code>: Receives messages from the worker</li><li><code>runner.postMessage(cmd, data)</code>: sends a message to the worker. The runner instance is passed to your <code>init</code>-method.</li></ul><b>Worker-Code:</b><ul><li><code>CodeBlocks.startReceivingEvents((request) => {})</code>: the handler receives messages sent from the DOM</li><li><code>CodeBlocks.postMessage(cmd, data)</code>: sends a message to the DOM-Code.</li></ul>",
        "AllowMessagePassingHintJava":"<b style=color:red>[EXPERIMENTAL]</b> When enabled, worker and DOM can exchange messages.<br><b>Canvas-Code:</b><ul><li><code>onMessage(cmd, data)</code>: Receives messages from the worker</li><li><code>runner.postMessage(cmd, data)</code>: sends a message to the worker. The runner instance is passed to your <code>init</code>-method.</li></ul><b>Worker-Code:</b><ul><li><code>CodeBlocks.startReceivingEvents((CodeBlocksBaseMessage request) -> {})</code>: the handler receives messages sent from the DOM</li><li><code>CodeBlocks.postMessage(String cmd, Object data)</code>: sends a message to the DOM-Code.</li></ul>",
        "KeepAliveCaption":"Keep Worker alive",
        "KeepAliveHint":"<b style=color:red>[EXPERIMENTAL]</b> Workers are not automatically terminated when the student code finishes.<br><br>The worker is stopped by using the <em>Stop</em>-Button or by reaching the maximum execution time. Student-Code can also terminate the worker (and itself) by calling <code>process.exit(0)</code>.<br><br>The <code>whenFinished(args)</code>-Method in your <b>Visualization Canvas</b> is called as soon as the student code finishes, which may be before the worker is terminated.",
        "KeepAliveHintJava":"<b style=color:red>[EXPERIMENTAL]</b> Workers are not automatically terminated when the students <code>main</code>-Method finishes.<br><br>The worker is stopped by using the <em>Stop</em>-Button or by reaching the maximum execution time. Student-Code can also terminate the worker (and itself) by calling <code>System.exit(0)</code>.<br><br>The <code>whenFinished(args)</code>-Method in your <b>Visualization Canvas</b> is called as soon as the <code>main</code>-Method finishes, which may be before the worker is terminated."
    },
    "CodePlayground": {
        "InvalidJson": "Output is not a valid JSON-Object",
        "Output": "Output:",
        "Message": "Message:",
        "ExperimentalScriptVersion":"Experimental Scripting Version",
        "ExperimentalScriptVersionDesc":"This scripting version is experimental. The properties and behaviour of this version might changen in the next update. You should not use this version for production.",
        "DeprecatedScriptVersion":"Deprecated Scripting Version",
        "DeprecatedScriptVersionDesc":"This scripting version is deprecated and will be removed in upcoming updates. Please upgrade your project to a later version."
    },
    "Tagger": {
        "ConfirmRepl": "Confirm Tag Replacement",
        "ConfirmReplMsg": "Do you really want to replace <b>all</b> occurrences of {name} with the value below?"
    },
    "RandomizerSetEditor": {
        "Caption": "Edit Set {nr}"
    },
    "RandomizerSettings": {
        "Caption": "Randomizer",
        "Available": "Available Tags",
        "Sets": "Defined Sets"
    },
    "Blockly": {
        "CodePreviewLabel": "Code Preview",
        "CodePreviewCaption": "The source-code generated by the above sequence",
        "RAWToolboxLabel": "RAW Toolbox Definition",
        "RAWToolboxCaption": "The raw XML-Definition of your toolbox",
        "CustomBlocksLabel": "Custom Blocks",
        "CustomBlocksCaption": "Create and manage Custom Blocks",
        "ToolboxLabel": "Customize Toolbox",
        "ToolboxCaption": "Manage Categories and the general look of your toolbox",
        "ToolboxCategories": "Categories",
        "ToolboxItems": "Blocks",
        "Properties": "Properties",
        "UseCustomToolbox": "Define Customized Toolbox XML",
        "BlockTypeNames": {
            "controls_if": "controls_if",
            "logic_compare": "logic_compare",
            "logic_operation": "logic_operation",
            "logic_negate": "logic_negate",
            "logic_boolean": "logic_boolean",
            "logic_null": "logic_null",
            "logic_ternary": "logic_ternary",
            "controls_repeat_ext": "controls_repeat_ext",
            "controls_whileUntil": "controls_whileUntil",
            "controls_for": "controls_for",
            "controls_forEach": "controls_forEach",
            "controls_flow_statements": "controls_flow_statements",
            "math_number": "math_number",
            "math_arithmetic": "math_arithmetic",
            "math_single": "math_single",
            "math_trig": "math_trig",
            "math_constant": "math_constant",
            "math_number_property": "math_number_property",
            "math_round": "math_round",
            "math_on_list": "math_on_list",
            "math_modulo": "math_modulo",
            "math_constrain": "math_constrain",
            "math_random_int": "math_random_int",
            "math_random_float": "math_random_float",
            "text": "text",
            "text_join": "text_join",
            "text_append": "text_append",
            "text_length": "text_length",
            "text_isEmpty": "text_isEmpty",
            "text_indexOf": "text_indexOf",
            "variables_get": "variables_get",
            "text_charAt": "text_charAt",
            "text_getSubstring": "text_getSubstring",
            "text_changeCase": "text_changeCase",
            "text_trim": "text_trim",
            "text_print": "text_print",
            "text_prompt_ext": "text_prompt_ext",
            "lists_create_with": "lists_create_with",
            "lists_repeat": "lists_repeat",
            "lists_length": "lists_length",
            "lists_isEmpty": "lists_isEmpty",
            "lists_indexOf": "lists_indexOf",
            "lists_getIndex": "lists_getIndex",
            "lists_setIndex": "lists_setIndex",
            "lists_getSublist": "lists_getSublist",
            "lists_split": "lists_split",
            "lists_sort": "lists_sort",
            "colour_picker": "colour_picker",
            "colour_random": "colour_random",
            "colour_rgb": "colour_rgb",
            "colour_blend": "colour_blend"
        }
    }
}
